# =======================================================
# 🧠 HelixNet Makefile – The Professional Standard 🧠
# =======================================================
# Purpose : Simplified, descriptive orchestration for Docker Compose
# Author  : Gemini, your development partner and Angel the fixer
# Updated : 2025-10-20 v1.0.0 (The Bruce Lee Chop)
# =======================================================
.ONESHELL:
SHELL := /bin/bash
include .env
COMPOSE_FILE := docker-compose.yml
PROJECT_NAME := helixnet
DB_NAME := postgres
DB_USER := postgres

# --- Profiles & Variables (KIC KIS) ---
CORE_PROFILES := --profile core
APP_PROFILES  := --profile app
WEB_SERVICE   := helix-web-app
# --- Emoji Helpers (The Chuck Standard) ---
# Main States
START = @echo "🟢 [INIT] Starting up the engines..."
STOP  = @echo "🔴 [SHUTDOWN] Ceasing operations..."
DONE  = @echo "✨ [COMPLETE] Task finished successfully."
WARN  = @echo "⚠️  [ATTENTION] Proceed with caution."
FAIL  = @echo "❌ [FAILURE] Something went wrong."
# Actions
DB    = @echo "💾 [DATABASE] "
CODE  = @echo "💻 [CODEBASE] "
TEST  = @echo "🧪 [TESTING] "
BUILD = @echo "🏗️  [BUILDING] "
CLEAN = @echo "🧹 [CLEANUP] "
# =======================================================
# 🚀 1. LIFECYCLE MANAGEMENT (Full Stack)
# =======================================================
.PHONY: up
up: ## ⬆️  Bring the entire stack up (Use 'make rebuild' for code updates)
	$(START) "Starting ALL containers in detached mode..."
	# 🚨 FIX: Explicitly include both CORE and APP profiles to ensure all services start
	set -a; . ./.env; set +a; docker compose -f $(COMPOSE_FILE) $(CORE_PROFILES) $(APP_PROFILES) up -d --remove-orphans
	$(DONE) "HelixNet is LIVE! Access links via 'make links'. 🌐"

.PHONY: down
down: ## ⬇️  Stop and remove all containers gracefully
	$(STOP) "Stopping HelixNet stack..."
	docker compose -f $(COMPOSE_FILE) down --remove-orphans

.PHONY: build
build: ## 🏗️  Build all Docker images from their latest source
	$(BUILD) "Re-compiling Docker images for Core and App services..."
	docker compose -f $(COMPOSE_FILE) build
	$(DONE) "All images built successfully! ✅"

.PHONY: rebuild
rebuild: down build up ## 🔨 Full clean reset: stop, rebuild images, restart containers
	$(CODE) "Executing full environment reset and rebuild (down -> build -> up)..."
	$(DONE) "Full rebuild completed! We are running on fresh code and containers. 🧩"

.PHONY: core-up
core-up: ## 🧱 Start only core infra (DB, Redis, Keycloak)
	$(DB) "Starting essential core infrastructure services..."
	set -a; . ./.env; set +a; \
	docker compose -f $(COMPOSE_FILE) $(CORE_PROFILES) up -d --remove-orphans
	@echo "🧱 [CORE UP] Core services started (check health with 'make wait-for-health')."
# =======================================================
.PHONY: deploy-code
deploy-code: build ## 📦 Build new code images and restart web/workers (Fast code update)
	$(CODE) "Building new application images (Web, Worker, Beat) to grab latest code..."
	docker compose -f $(COMPOSE_FILE) $(APP_PROFILES) build
	$(CODE) "Restarting application services using the newly built images..."
	# Restart using --no-deps to only touch the application containers
	docker compose -f $(COMPOSE_FILE) $(APP_PROFILES) up -d --no-deps --remove-orphans
	$(DONE) "New code is deployed and application services are running. 🥳"
# =======================================================
# 🗄️ 3. DATABASE MANAGEMENT
# =======================================================
.PHONY: setup
setup: core-up wait-for-health migrate seed ## 💾 Complete initial setup (migrate, then seed)
	$(DB) "Initial application setup complete! Ready to accept requests. 🚀"

.PHONY: migrate
migrate: core-up wait-for-health ## 🧬 Apply Alembic migrations to the database head
	$(DB) "Applying new database migrations to the latest head..."
	docker compose run --rm $(WEB_SERVICE) alembic upgrade head
	$(DONE) "Migrations applied successfully! Database schema is up-to-date. 🎉"

.PHONY: rev
rev: core-up wait-for-health ## ✍️ Create a new Alembic migration (usage: make rev msg="Your description")
	$(DB) "Generating new Alembic revision: $(msg)..."
	docker compose run --rm $(WEB_SERVICE) alembic revision --autogenerate -m "$(msg)"
	$(DONE) "New revision created. Check 'migrations/versions/' folder. 🪶"

.PHONY: seed
seed: core-up wait-for-health ## 🥕 Run the initial data seeding script (admin user creation, etc.)
	$(DB) "Executing initial data seeding script..."
	# 🌍 KEYCLOAK REALM IMPORT: THE BRUCE LEE PRECISION STRIKE 🐉
	@echo "🌍 [KEYCLOAK] Attempting realm 'helixnet' import..."
	docker exec keycloak /opt/keycloak/bin/kc.sh import \
		--file /opt/keycloak/data/import/helix-realm.json \
		--realm helixnet
	@echo "✅ Realm import attempt finished."
	# 🔑 Next, run the user seeding script
	docker compose run --rm $(WEB_SERVICE) python app/scripts/seed_users.py
	$(DONE) "Data seeding complete! Users and base data are ready. 👤"

.PHONY: db-nuke
db-nuke: down ## 💥 Nuke DB (Stop, remove volumes, restart core, migrate, seed)
	$(WARN) "🚨 DANGER ZONE: This will wipe ALL database volumes and data!"
	$(CLEAN) "Removing all volumes associated with the stack..."
	# 1. 🧹 CLEAN UP: Remove containers/volumes
	docker compose -f $(COMPOSE_FILE) down -v --remove-orphans
	# 2. 💾 START & SETUP
	$(MAKE) setup
	$(DONE) "Full db-nuke and setup completed. Ready for development. 🎉"
# =======================================================
# 🧰 4. UTILITIES & ACCESS
# =======================================================
.PHONY: logs
logs: ## 📜 Tail logs from all running containers
	@echo "👁️  [LOGS] Tailing logs... (Ctrl+C to stop)"
	docker compose -f $(COMPOSE_FILE) logs -f

.PHONY: shell
shell: ## 🧑‍💻 Open an interactive BASH shell inside the main web container
	@echo "🦪 [SHELL] Opening BASH inside the $(WEB_SERVICE) container..."
	docker compose exec $(WEB_SERVICE) bash

.PHONY: python
python: ## 🐍 Open an interactive PYTHON shell inside the main web container
	@echo "🐍 [PYTHON] Opening interactive Python environment..."
	docker compose exec $(WEB_SERVICE) python

.PHONY: users
users: core-up wait-for-health ## 👤 Query and display all existing user emails
	$(DB) "Fetching all user emails from the database..."
	docker compose run --rm $(WEB_SERVICE) python app/scripts/show_users.py
	$(DONE) "User list retrieved. 👥"

.PHONY: links
links: ## 🔗 Show quick access links for local services
	@echo "\n🌐 --- HelixNet Access Links ---"
	@echo "🎁 GitHub Repo:              https://github.com/akenel/helixnet/tree/main"
	@echo "💻 WebApp Backend OpenAPI:   http://helix.local/docs"
	@echo "🐇 Flower UI (Celery):       http://0.0.0.0:5555/"
	@echo "📨 RabbitMQ Mgmt:            http://localhost:15672/"
	@echo "🗄️ MinIO Console:            http://0.0.0.0:9091/"
	@echo "🧠 PgAdmin UI:               http://0.0.0.0:5050/browser/"
	@echo "-----------------------------------\n"

.PHONY: wait-for-health
wait-for-health: ## ⏳ Wait for critical services (postgres, keycloak) to become healthy
	@echo "⏳ [WAITING] Waiting for Postgres and Keycloak to reach 'healthy' state..."
	# Use 'wait' command for the services tagged as healthy
	docker compose wait postgres keycloak
	$(DONE) "Critical services are Healthy."

.PHONY: kc-token
kc-token: ## 🔑 Retrieve and test the Keycloak Admin Access Token (for verification)
	@echo "🔑 [KEYCLOAK] Requesting Admin Token from Keycloak using service script..."
	@docker compose run --rm $(WEB_SERVICE) python app/scripts/get_admin_token.py
	$(DONE) "Admin Token script executed."

# =======================================================
# 🧪 5. TESTING SUITE
# =======================================================
.PHONY: test-unit
test-unit: ## 🧪 Run Python unit/integration tests (isolated DB)
	$(TEST) "Running Python unit tests with isolated test DB (ENV=testing)..."
	docker compose exec -e ENV=testing $(WEB_SERVICE) bash -c "
	echo '🥋 Chuck Norris enters the test dojo...' && 
	cd /code/app/tests && 
	pytest -vv --color=yes --maxfail=1 --disable-warnings --tb=short && 
	echo '✅ All tests passed! Chuck Norris approves. 👊' || 
	( echo '💀 Tests failed. Chuck Norris is displeased. ⚡' && exit 1 )"
	$(DONE) "Unit test suite completed. 🧠"

.PHONY: test-e2e
test-e2e: ## 🔑 Run authenticated E2E API tests (login + token validation)
	$(TEST) "Running authenticated End-to-End API tests (E2E)..."
	docker compose exec $(WEB_SERVICE) bash /code/app/tests/test_api.sh
	$(DONE) "E2E API tests completed successfully. 🔐"

.PHONY: test
test: setup test-unit test-e2e ## 🎯 Full test suite: start, setup, run unit + E2E
	$(DONE) "The full HelixNet test suite has executed successfully! Everything is green. 🥇"

.PHONY: smoke
smoke: ## 💨 Run the helix-super-smoke quick health check
	$(TEST) "Running quick smoke test script..."
	docker compose exec $(WEB_SERVICE) bash app/scripts/helix-super-smoke.sh
	$(DONE) "Smoke test successful. Health check passed. 💨"

# =======================================================
# 🕵️ 6. HELP MENU & INSPECTION
# =======================================================
.PHONY: help
help: ## ❓ Show this descriptive help menu
	@clear
	@echo "🔍 \033[1mAvailable Commands for HelixNet:\033[0m\n"
	@grep -E '^[a-zA-Z_-]+:.*##' $(MAKEFILE_LIST) | \
	awk 'BEGIN {FS = "##"}; \
	{ \
	cmd=$$1; \
	sub(/^.*Makefile:/, "", cmd); \
	gsub(/:.*/, "", cmd); \
	printf "%s\t\033[36m make %-20s\033[0m\n", $$2, cmd \
	}'
	@echo "  💡 Example: make rebuild && make setup   🚀"    

.PHONY: show-tables
show-tables: core-up wait-for-health ## 📊 List all tables in the public schema and their owners
	@echo "========================================"
	@echo "📂 DATABASE TABLES (DB: $(DB_NAME))"
	@echo "========================================"
	docker compose exec db psql -d $(DB_NAME) -U $(DB_USER) -c '\dt'

.PHONY: show
show: show-tables users ## 🎯 Consolidated command: Show all DB inspection data (tables + users)
	@echo "\n========================================"
	@echo "✅ DB inspection complete."
	@echo "========================================\n"
