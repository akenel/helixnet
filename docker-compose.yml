services:

  # ... postgres service definition remains the same ...
  postgres:
    image: postgres:latest
    container_name: postgres
    profiles: ["core", "app"]
    restart: always
    env_file:
      - .env
    environment:
      # Use the variables defined in .env
      POSTGRES_DB: ${POSTGRES_DB} 
      POSTGRES_USER: ${POSTGRES_USER} 
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - int_core
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5

  keycloak:
    build:
      context: ./keycloak
      dockerfile: Dockerfile
    image: helix/keycloak:24.0.4-prod
    container_name: keycloak
 #  --- üíØ explicit command. 
    command: start --optimized --import-realm
    restart: unless-stopped
    profiles: ["core", "app"]
    env_file:
      - .env
    environment:
      KC_DB_URL: ${KC_DB_URL}
      KC_DB_USERNAME: ${KC_DB_USERNAME} 
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_DB_SCHEMA: public       # üëà PLATINUM ADDITION: Explicitly set DB schema
      KC_IMPORT_REALM: true      # üëà PLATINUM ADDITION: Forces realm import on startup
      # --- Keycloak Runtime Settings ---
      KC_PROXY: edge
      KC_ADMIN_URL: https://keycloak.helix.local/admin 
      KC_IMPORT_FILE: /opt/keycloak/data/import/helix-realm.json
      KC_HOSTNAME_URL: https://keycloak.helix.local
      KC_HOSTNAME_STRICT: true
      KC_HTTP_ENABLED: true  
      KC_HTTP_PORT: 8080
      # --- Keycloak Admin/Realm Settings (for bootstrap/initial setup) ---
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_BOOTSTRAP_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_BOOTSTRAP_ADMIN_PASSWORD}
      KC_REALM: ${KC_REALM}
    ports:
      - "8081:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak/config/helix-realm.json:/opt/keycloak/data/import/helix-realm.json
    networks:
      - int_core
    healthcheck:
      test: [ "CMD-SHELL", "curl -fL http://keycloak:8080/ || exit 1" ] # A simpler check      interval: 10s
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 60
##################################################################
# üîê Vault - Secret Management
# ###################################################################
#   vault:
#       image: hashicorp/vault:1.17.1
#       container_name: vault
#       entrypoint: vault server -dev
#       ports:
#         - "8200:8200"
#       volumes:
#         # Removed the init_vault.sh mount (it's not needed in dev mode)
#         - ./vault/config:/vault/config # Keep volume for potential future config/storage
#       environment:
#         # VAULT_DEV_MODE=1 is redundant when using 'vault server -dev' but harmless
#         - VAULT_DEV_ROOT_TOKEN_ID=my_root_token # CRITICAL: Sets the initial token
#         - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200 # CRITICAL: Ensures it listens correctly
#         - VAULT_ADDR=http://127.0.0.1:8200 # For internal self-referencing (healthcheck)
#       cap_add:
#         - IPC_LOCK
#       healthcheck:
#         # Checks if Vault is initialized and unsealed. Dev mode handles both instantly.
#         test: ["CMD", "vault", "status", "-address=http://127.0.0.1:8200", "|", "grep", "Initialized", "|", "grep", "true"]
#         interval: 10s
#         timeout: 5s
#         retries: 5
#         start_period: 5s # Vault starts very fast in dev mode
# üõ°Ô∏è TRAEFIK: Edge Router with HTTPS Termination (mkcert)
# -----------------------------------------------------
  traefik:
    image: traefik:latest
    container_name: traefik
    profiles: ["core", "app"]
    command:
      - --configfile=/etc/traefik/traefik.yml
      - --api.dashboard=true
      - --api.insecure=true 
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    networks:
      - helix_traefik_proxy
      - int_core
    ports:
      - "80:80"    
      - "443:443" 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
      - ./traefik/certs:/etc/traefik/certs:ro
# -----------------------------------------------------
# üöÄ HELIX-WEB-APP: Your FastAPI Application (Main API)
# -----------------------------------------------------
  helix-web-app:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    ports:
      - "8000:8000"
    container_name: helix-web-app  
    profiles: ["core", "app"]
    env_file:
      - .env
    volumes:
      - .:/code
    working_dir: /code
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    networks:
      - int_core
    environment:
      # --- VARIABLES REQUIRED BY YOUR FASTAPI APP'S SETTINGS ---
      # **THIS IS THE FIX FOR THE PYDANTIC ERROR**
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      # Ensure all other Keycloak-related settings are also defined here
      KEYCLOAK_SERVER_URL: http://keycloak:8080 # Use service name within the network
      KEYCLOAK_REALM: helixnet_realm
      KEYCLOAK_CLIENT_ID: fastapi-client
      KEYCLOAK_CLIENT_SECRET: ${KC_CLIENT_SECRET}
    depends_on:
      - keycloak
      - postgres
      - redis
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"] 
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 20s
# ----------------------------------------------------
# CORE INFRASTRUCTURE SERVICES
# ----------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: redis
    profiles: ["core", "app"]
    command: redis-server --appendonly yes
    ports:
      - "6379:6379" 
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - int_core
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5
##################################################################
  redis-ui:
    image: redislabs/redisinsight:latest
    container_name: redis-ui
    profiles: ["core", "app"]
    expose:
      - "5540" 
    networks:
      - int_core
##################################################################
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    profiles: ["core", "app"]
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "5672:5672"
      - "15672:15672" 
    restart: unless-stopped
    networks:
      - int_core
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
##################################################################
  minio:
    image: minio/minio:latest
    container_name: minio
    profiles: ["core", "app"]
    restart: always
    env_file:
      - .env
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
      - ./minio-init:/docker-entrypoint-init.d  
    networks:
      - int_core
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3 
# ----------------------------------------------------
# APPLICATION SERVICES
# ----------------------------------------------------
  worker:
    build: 
      context: .
      dockerfile: ./app/Dockerfile
    container_name: worker
    profiles: ["app", "worker", "core"]
    env_file:
      - .env
    volumes:
      - .:/code
    working_dir: /code
    command: ["celery", "-A", "app.tasks.celery_app:celery_app", "worker", "-l", "info", "--events"]
    depends_on:
      - rabbitmq
    restart: on-failure
    networks:
      - int_core
##################################################################
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    profiles: ["core", "app"]
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    expose:
      - "80" 
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - int_core
##################################################################
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    profiles: ["core", "app"]
    command: -H unix:///var/run/docker.sock
    expose:
      - "9000" 
      - "9443" 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: unless-stopped
    networks:
      - int_core
##################################################################
  beat:
    build:
      context: .
      dockerfile: ./app/Dockerfile
    container_name: beat
    profiles: ["core", "app"]
    env_file:
      - .env
    volumes:
      - .:/code
    working_dir: /code
    command: celery -A app.tasks.celery_app beat -l INFO 
    depends_on:
      - rabbitmq
      - worker
    restart: unless-stopped
    networks:
      - int_core
###################################################################
  flower:
    image: mher/flower:2.0
    container_name: flower
    networks:
      - int_core
    profiles: ["core", "app"]
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=amqp://admin:admin@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["celery", "flower", "--address=0.0.0.0", "--port=5555", "--basic_auth=admin:admin"]
# ----------------------------------------------------
# NAMED VOLUMES
# ----------------------------------------------------
volumes:
  redis_data:
  portainer_data:
  pgadmin_data:
  postgres_data:
  minio_data:
  keycloak_data:
# ----------------------------------------------------
# NETWORK
# ----------------------------------------------------
networks:
  int_core:
    driver: bridge
  helix_traefik_proxy:
    driver: bridge  
