# ==========================================
# 🧠 HelixNet Makefile – Managed with Care 🧠
# ==========================================
# Purpose: Simplify Docker Compose orchestration & database management
# Author: Sherlock (Your faithful assistant)
# Updated: 2025-10-05
# ==========================================

# 🧩 VARIABLES
COMPOSE_FILE := docker-compose.yml
PROJECT_NAME := helixnet

# Profiles
CORE_PROFILES := --profile core
APP_PROFILES := --profile app

# Helpers for colorful output 🌈
INFO  = @echo "🟦 [INFO] "
OK    = @echo "🟩 [OK] "
WARN  = @echo "🟨 [WARN] "
ERR   = @echo "🟥 [ERROR] "


# ==========================================
# 🚀 MAIN TARGETS
# ==========================================

.PHONY: start
start: ## 🔥 Start all core + app services
	$(INFO) "Starting HelixNet stack..."
	docker compose -f $(COMPOSE_FILE) $(CORE_PROFILES) $(APP_PROFILES) up -d
	$(OK) "All services are up and running! 🚀"

.PHONY: stop
stop: ## 🧯 Stop and remove all containers
	$(INFO) "Stopping and cleaning up containers..."
	docker compose -f $(COMPOSE_FILE) down
	$(OK) "Containers stopped and removed. 🧹"

.PHONY: build
build: ## 🛠️ Build all Docker images
	$(INFO) "Building Docker images..."
	docker compose -f $(COMPOSE_FILE) build
	$(OK) "Build complete! ✅"

.PHONY: rebuild
rebuild: ## 🔄 Stop, rebuild, and start everything fresh
	$(INFO) "Rebuilding full environment..."
	$(MAKE) stop
	$(MAKE) build
	$(MAKE) start
	$(OK) "Full rebuild completed! 🧩"


# ==========================================
# ⚙️ CORE SERVICES
# ==========================================

.PHONY: core-up
core-up: ## 🧱 Start only core services (DB, cache, broker, storage)
	$(INFO) "Starting core infrastructure..."
	docker compose -f $(COMPOSE_FILE) $(CORE_PROFILES) up -d
	$(OK) "Core services are up. 💾"

.PHONY: logs
logs: ## 📜 Tail logs from all running containers
	$(INFO) "Tailing logs... (Ctrl+C to exit)"
	docker compose -f $(COMPOSE_FILE) logs -f


# ==========================================
# 🗄️ DATABASE & MIGRATIONS
# ==========================================

Makefile
Variables for Docker Compose commands

COMPOSE_FILE := docker-compose.yaml
Define profiles for easy launch control

CORE_SERVICES := postgres redis rabbitmq minio
APP_SERVICES := web worker
Default target for quick start

.PHONY: start
start: ## Launches core infrastructure and the application services.
docker compose -f $(COMPOSE_FILE) --profile core --profile app up -d

.PHONY: core-up
core-up: ## Launches only the core infrastructure (DBs, Cache, Broker)
docker compose -f $(COMPOSE_FILE) --profile core up -d

.PHONY: stop
stop: ## Stops and removes all HelixNet containers and default network.
docker compose -f $(COMPOSE_FILE) down

.PHONY: build
build: ## Builds the application Docker image.
docker compose -f $(COMPOSE_FILE) build

.PHONY: rebuild
rebuild: stop build start ## Stop, rebuild, and start everything fresh

.PHONY: logs
logs: ## Follows the logs for all running services.
docker compose -f $(COMPOSE_FILE) logs -f

.PHONY: links
links: ## Displays essential access links.
@echo "\n--- HelixNet Access Links ---"
@echo "Web App:      http://localhost:8000"
@echo "MinIO Console:  http://localhost:9001 (User/Pass from .env)"
@echo "RabbitMQ Mgmt:  http://localhost:15672 (User/Pass from .env)"
@echo "---------------------------\n"


.PHONY: reset-db
reset-db: ## 💣 Reset database and reapply migrations
	$(WARN) "⚠️  This will nuke your DB and rebuild it!"
	docker compose -f $(COMPOSE_FILE) down -v
	docker compose -f $(COMPOSE_FILE) $(CORE_PROFILES) up -d
	docker compose -f $(COMPOSE_FILE) $(APP_PROFILES) build
	docker compose -f $(COMPOSE_FILE) $(APP_PROFILES) run --rm web alembic upgrade head
	$(OK) "Database reset and migrated. 🧩"


# ==========================================
# 🧰 UTILITIES
# ==========================================

.PHONY: show-tables
show-tables: ## 🧾 Show all SQLAlchemy table names
	$(INFO) "Fetching table names from database..."
	docker compose -f $(COMPOSE_FILE) $(APP_PROFILES) run --rm web \
	python -c "from app.db.database import Base; import app.db.models; print(Base.metadata.tables.keys())"

.PHONY: test
test: ## 🧪 Run pytest inside the web container
	$(INFO) "Running tests..."
	docker compose exec web pytest app/tests/ -v
	$(OK) "All tests completed. 🧪"

.PHONY: links
links: ## 🔗 Show quick access links for local services
	@echo "\n🌐 --- HelixNet Access Links ---"
	@echo "🎁️ GitHub Repo:			https://github.com/akenel/helixnet/tree/main#"
	@echo "💻 WebApp Backend OpenApi:	http://localhost:8000/docs (User marcel@helix.net /Pass marcel from seeded users)"
	@echo "🐇 Flower UI:			http://0.0.0.0:5555/ (User/Pass)"
	@echo "🐇 Redis UI:			http://0.0.0.0:5540/ (User/Pass with Accepting Licence Aggrement)"
	@echo "📨 RabbitMQ Mgmt:		http://localhost:15672 (User/Pass from .env)"
	@echo "🗄️  MinIO Console:		http://0.0.0.0:9091 (User minioadmin /Pass minioadmin from .env)"
	@echo "🧠 PgAdmin UI 🐘 Postgres:	http://0.0.0.0:5050/browser/ (User helix_user /Pass helix_pass for 'helix_db' from .env)"
	@echo "🧩 Portainer Dashboard:		https://localhost:9999 (User Secure admin/Pass from KeePass)"
    
	@echo "-----------------------------------\n"

# ==========================================
# 💡 HELP MENU (THE CROWN JEWEL)
# ==========================================

.PHONY: help
help: ## 🕵️ Show this help menu
	@echo "🔍 \033[1mAvailable Commands for HelixNet:\033[0m\n"
	@grep -E '^[a-zA-Z_-]+:.*##' $(MAKEFILE_LIST) \
		| awk 'BEGIN {FS = ":.*##"}; {printf "⚙️  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo "\n💡 Example: make start   🚀"

.PHONY: migrate
migrate: ## Apply Alembic migrations to latest head
	$(INFO) "Running Alembic migrations..."
	# FIX: Only activate the 'core' profile (which contains postgres) when running the command.
	docker compose -f $(COMPOSE_FILE) $(CORE_PROFILES) run --rm web alembic upgrade head
	$(OK) "Migrations applied successfully! 🎉"

.PHONY: revision
revision: ## 🧱 Create a new Alembic migration (usage: make revision msg="message")
	$(INFO) "Creating Alembic revision: $(msg)"
	docker compose -f $(COMPOSE_FILE) $(APP_PROFILES) run --rm web alembic revision --autogenerate -m "$(msg)"
	$(OK) "New revision created. 🪶"